EXO1
      Algorithme 1

fonction nB(valeurs_d'entrée)
    Pour chaque valeur v dans les valeurs_d'entrée de l'indice 1 à l'indice 2
        Si v est égal à 0
            Retourner 1
        Sinon
            Retourner 0

fonction AB(valeurs_d'entrée)
    Initialiser x à 0
    Pour chaque valeur v dans les deux premières valeurs_d'entrée
        Si v est égal à 1
            Incrémenter x de 1
        Sinon
            Continuer
    Si x est supérieur à 1
        Retourner 1
    Sinon
        Retourner 0

fonction nBC(valeurs_d'entrée)
    Initialiser x à 0
    nb = nB(valeurs_d'entrée)
    Pour chaque valeur v dans les valeurs_d'entrée de l'indice 2 à l'indice 3
        Si v est égal à 1 ET nb est égal à 1
            Retourner 1
        Sinon
            Retourner 0

fonction nC(valeurs_d'entrée)
    Pour chaque valeur v dans les valeurs_d'entrée de l'indice 2 à l'indice 3
        Si v est égal à 0
            Retourner 1
        Sinon
            Retourner 0

fonction AnC(valeurs_d'entrée)
    Initialiser x à 0
    nc = nC(valeurs_d'entrée)
    Pour chaque valeur v dans les valeurs_d'entrée de l'indice 0 à l'indice 1
        Si v est égal à 1 ET nc est égal à 1
            Retourner 1
        Sinon
            Retourner 0

fonction res(valeurs_d'entrée)
    Initialiser x à 0
    anc = AnC(valeurs_d'entrée)
    ab = AB(valeurs_d'entrée)
    nbc = nBC(valeurs_d'entrée)
    Pour chaque valeur v dans les valeurs_d'entrée
        Si ab est égal à 1 OU anc est égal à 1 OU nbc est égal à 1
            Retourner 1
        Sinon
            Retourner 0

fonction formes_canoniques_premières(valeurs_d'entrée)
    a, b, c = "", "", ""
    resultat = ""
    x = 0
    Pour chaque valeur v dans les valeurs_d'entrée
        Si x est égal à 0
            Si v est égal à 1
                a = "(A"
            Sinon
                a = "(!A"
            Incrémenter x de 1
        Sinon si x est égal à 1
            Si v est égal à 1
                b = "B"
            Sinon
                b = "!B"
            Incrémenter x de 1
        Sinon si x est égal à 2
            Si v est égal à 1
                c = "C) "
            Sinon
                c = "!C)"
    Ajouter a, b et c à resultat
    Retourner resultat

fonction formes_canoniques_secondes(valeurs_d'entrée)
    a, b, c = "", "", ""
    resultat = ""
    x = 0
    Pour chaque valeur v dans les valeurs_d'entrée
        Si x est égal à 0
            Si v est égal à 0
                a = "(A"
            Sinon
                a = "(!A"
            Incrémenter x de 1
        Sinon si x est égal à 1
            Si v est égal à 0
                b = "B"
            Sinon
                b = "!B"
            Incrémenter x de 1
        Sinon si x est égal à 2
            Si v est égal à 0
                c = "C) "
            Sinon
                c = "!C)"
    Ajouter a, b et c à resultat
    Retourner resultat

         Code sur python

from itertools import product

def table_de_verite():
    n = 3
    X1 = "A"
    X2 = "B"
    X3 = "C"
    X4 = "!B"
    X5 = "!C"
    X6 = "AB"
    X7 = "!BC"
    X8 = "A!C"
    X9 = "AB + !BC + A!C"
    results_list, results_list_two = [], []
    variables = [X1,X2,X3,X4,X5,X6,X7,X8]
    #print("Variables:", variables)
    print("Table de Vérité: f(A,B,C) = AB + !BC + A!C")
    print("+" + "-"*(16*n) + "+-------+")
    print("| " + " | ".join(variables) + f" | | {X9}|")
    print("+" + "-"*(16*n) + "+-------+")

    for values in product([0, 1], repeat=n):
        outputnB = nB(values)
        outputnC = nC(values)
        outputAB = AB(values)
        outputnBC = nBC(values)
        outputAnC = AnC(values)
        outputFinal = res(values)
        if outputFinal == 1 :
            form1 = canonical_first_forms(values)
            results_list.append(form1)
        concatened_result = " + ".join(results_list)

        if outputFinal == 0 :
            form2 = canonical_second_forms(values)
            results_list_two.append(form2)
        concatened_result_two = " ". join(results_list_two) 
        
        print("| " + " | ".join(str(v) for v in values) + f" | {outputnB}  |" + f"  {outputnC} |" + f"  {outputAB}" + f" |  {outputnBC}  |"+f"  {outputAnC}  |" + " | "+ " "*(4)+  f"  {outputFinal}  "+ " "*(5) +"|")

    print("+" + "-"*(16*n) + "+-------+")


    print("Première forme canonique : ", concatened_result)
    print("Deuxième forme canonique : ", concatened_result_two)
 
#Fonction qui retourne les valeurs de !B 
def nB(input_values):
    for v in input_values[1:2]:
        if v == 0 :
            return 1
        else :
            return 0

#Fonction qui donne les valeurs de AB
def AB(input_values):
    x = 0
    for v in input_values[:2]:
        if v == 1 :
            x += 1
        else :
            continue
    if x > 1 :
        return 1
    else : 
        return 0
    
#Foncion qui retourne les valeurs de !BC
def nBC(input_values):
    x = 0
    nb = nB(input_values)
    for v in input_values[2:3]:
        if (v == 1) & (nb == 1) :
            return 1
        else :
            return 0

#Fonction qui retourne les valeurs de !C
def nC(input_values):
    for v in input_values[2:3]:
        if v == 0 :
            return 1
        else :
            return 0

#Fonction qui retourne les valeurs de A!C      
def AnC(input_values):
    x = 0
    nc = nC(input_values)
    for v in input_values[0:1]:
        if (v == 1) & (nc == 1) :
            return 1
        else :
            return 0

#Fonction qui retourne les valeurs en sortie (AB + !BC + A!C )
def res(input_values):
    x = 0
    anc = AnC(input_values)
    ab = AB(input_values)
    nbc = nBC(input_values)
    for v in input_values:
        if (ab == 1) | (anc == 1) | (nbc == 1) :
            return 1
        else :
            return 0

def canonical_first_forms(input_values):
    a, b, c = "", "", ""
    resultat, resultatfinal = "", ""
    x = 0

    for v in input_values:
        if x == 0 :  
            a = "(A" if (v == 1)  else "(!A"
            x += 1
        elif x == 1 :
            b = "B" if (v == 1) else "!B"
            x += 1
        elif x == 2 :
            c = "C) " if (v == 1) else "!C)"
        #resultat = [a, b, c]
    resultat += a + " " + b + " " + c
    return resultat
    #return form1, form2

def canonical_second_forms(input_values):
    a, b, c = "", "", ""
    resultat, resultatfinal = "", ""
    x = 0

    for v in input_values:
        if x == 0 :  
            a = "(A" if (v == 0)  else "(!A"
            x += 1
        elif x == 1 :
            b = "B" if (v == 0) else "!B"
            x += 1
        elif x == 2 :
            c = "C) " if (v == 0) else "!C)"

    resultat += a  + " + " + b + " + " + c
    return resultat

    

def main():
    table_de_verite()

if __name__ == "__main__":
    main()


EXO2
   Algorithme 2

fonction karnaugh_minimization()
    // Création de la table de Karnaugh
    k_map = [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0]]

    // Remplissage de la table avec les valeurs de la fonction
    k_map[0][1] = 1  // ab
    k_map[1][2] = 1  // !bc
    k_map[2][0] = 1  // a!c

    // Affichage de la table de Karnaugh
    afficher("Table de Karnaugh:")
    Pour chaque ligne dans k_map
        afficher(ligne)

    // Identification des groupes et termes communs
    groupes = []
    Pour i allant de 0 à 2
        Pour j allant de 0 à 3
            Si k_map[i][j] est égal à 1
                groupe = [(i, j)]
                k_map[i][j] = 0  // Marquer la case comme visitée
                // Regroupement des cases adjacentes
                Si j < 3 ET k_map[i][j+1] est égal à 1
                    Ajouter (i, j+1) à groupe
                    k_map[i][j+1] = 0
                Si i < 2 ET k_map[i+1][j] est égal à 1
                    Ajouter (i+1, j) à groupe
                    k_map[i+1][j] = 0
                Ajouter groupe à groupes

    // Construction de l'expression minimisée
    expression_minimisée = ""
    Pour chaque groupe dans groupes
        termes = []
        Pour chaque cellule dans groupe
            a = 'a' si cellule[0] est égal à 0 sinon '!a'
            b = 'b' si cellule[1] est égal à 0 ou cellule[1] est égal à 1 sinon '!b'
            c = 'c' si cellule[1] est égal à 0 ou cellule[1] est égal à 2 sinon '!c'
            Ajouter a + b + c à termes
        Ajouter "(" + rejoindre(terms, " + ") + ")" à expression_minimisée

    afficher("Expression minimisée:", expression_minimisée)

// Appel de la fonction pour minimiser l'expression
karnaugh_minimization()

         code sur python

def karnaugh_minimization():
    # Création de la table de Karnaugh
    k_map = [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0]]

    # Remplissage de la table avec les valeurs de la fonction
    k_map[0][1] = 1  # ab
    k_map[1][2] = 1  # !bc
    k_map[2][0] = 1  # a!c

    # Affichage de la table de Karnaugh
    print("Table de Karnaugh:")
    for row in k_map:
        print(row)

    # Identification des groupes et termes communs
    groups = []
    for i in range(3):
        for j in range(4):
            if k_map[i][j] == 1:
                group = [(i, j)]
                k_map[i][j] = 0  # Marquer la case comme visitée
                # Regroupement des cases adjacentes
                if j < 3 and k_map[i][j+1] == 1:
                    group.append((i, j+1))
                    k_map[i][j+1] = 0
                if i < 2 and k_map[i+1][j] == 1:
                    group.append((i+1, j))
                    k_map[i+1][j] = 0
                groups.append(group)

    # Construction de l'expression minimisée
    minimized_expr = ""
    for group in groups:
        terms = []
        for cell in group:
            a = 'a' if cell[0] == 0 else '!a'
            b = 'b' if cell[1] == 0 or cell[1] == 1 else '!b'
            c = 'c' if cell[1] == 0 or cell[1] == 2 else '!c'
            terms.append(a + b + c)
        minimized_expr += "(" + " + ".join(terms) + ")"

    print("Expression minimisée:", minimized_expr)


# Appel de la fonction pour minimiser l'expression
karnaugh_minimization()
